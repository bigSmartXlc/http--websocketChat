import{d as I,r as u,o as B,S as D,x as i,z as n,J as y,M,A as _,N as E,O as T,K as J,L as P,P as U,Q as S,y as d,_ as V}from"#entry";const K={class:"websocket-chat-container"},L={class:"chat-header"},z={key:0,class:"connection-settings"},A={key:1,class:"connecting-status"},F={class:"message-sender"},H={class:"message-content"},Q={key:3,class:"chat-input-container"},R=["disabled"],q=I({__name:"socket",setup(G){const h=u("ws://localhost:8080"),a=u(null),o=u(!1),p=u(!1),v=u(""),c=u([]),k=u(null),N=async()=>{if(!(p.value||o.value)){p.value=!0,l(`正在连接到服务器: ${h.value}`);try{a.value=await $(h.value),o.value=!0,l("已成功连接到WebSocket服务器"),x(a.value),l("连接成功，可以开始发送消息了..."),await C(a.value,"你好，WebSocket服务器！")}catch(e){console.error("WebSocket连接失败:",e),m(`连接失败: ${e instanceof Error?e.message:"未知错误"}`)}finally{p.value=!1}}},$=e=>new Promise((s,t)=>{const r=new WebSocket(e),b=setTimeout(()=>{t(new Error("WebSocket连接超时"))},1e4);r.onopen=()=>{clearTimeout(b),console.log("已连接到 WebSocket 服务器"),s(r)},r.onerror=f=>{clearTimeout(b),console.error("WebSocket 连接出错:",f),t(new Error("连接WebSocket服务器失败"))},r.onclose=()=>{clearTimeout(b),t(new Error("WebSocket连接被关闭"))}}),w=()=>{a.value&&(a.value.close(),a.value=null,o.value=!1,l("已断开与服务器的连接"))},x=e=>{e.onmessage=s=>{try{const t=JSON.parse(s.data);switch(t.type){case"chat_response_chunk":O(t.content);break;case"chat_response_end":l("--- 响应结束 ---");break;case"error":m(`服务器错误: ${t.message}`);break;default:l(`收到未知类型的消息: ${JSON.stringify(t)}`)}}catch(t){console.error("解析WebSocket消息失败:",t),m(`解析消息失败: ${t instanceof Error?t.message:"未知错误"}`)}},e.onclose=()=>{a.value=null,o.value=!1,l("与服务器的连接已关闭")},e.onerror=s=>{console.error("WebSocket错误:",s),m(`WebSocket错误: ${s instanceof Event?"连接错误":"未知错误"}`)}},O=e=>{const s=c.value[c.value.length-1];!s||s.type!=="response"?c.value.push({type:"response",sender:"AI",content:e}):(s.content+=e,c.value=[...c.value]),S().then(()=>g())},W=async()=>{if(!v.value.trim()||!a.value)return;const e=v.value.trim();c.value.push({type:"user",sender:"您",content:e});try{await C(a.value,e),v.value="",S().then(()=>g())}catch(s){console.error("发送消息失败:",s),m(`发送消息失败: ${s instanceof Error?s.message:"未知错误"}`)}},C=(e,s)=>new Promise((t,r)=>{if(e.readyState===WebSocket.OPEN){const f={...{type:"chat",content:s},messageId:Date.now().toString(),timestamp:new Date().toISOString()};e.send(JSON.stringify(f)),setTimeout(()=>{t()},10)}else r(new Error("WebSocket 连接未就绪"))}),l=e=>{c.value.push({type:"system",sender:"系统",content:e}),S().then(()=>g())},m=e=>{c.value.push({type:"error",sender:"错误",content:e}),S().then(()=>g())},g=()=>{k.value&&(k.value.scrollTop=k.value.scrollHeight)};return B(()=>{}),D(()=>{w()}),(e,s)=>(d(),i("div",K,[n("div",L,[s[2]||(s[2]=n("h1",null,"WebSocket聊天界面",-1)),n("div",{class:M(["connection-status",{connected:o.value,disconnected:!o.value}])},_(o.value?"已连接":"未连接"),3)]),!o.value&&!p.value?(d(),i("div",z,[E(n("input",{"onUpdate:modelValue":s[0]||(s[0]=t=>h.value=t),placeholder:"输入WebSocket服务器地址，默认为ws://localhost:8080",class:"url-input"},null,512),[[T,h.value]]),n("button",{onClick:N,class:"connect-button"},"连接")])):y("",!0),p.value?(d(),i("div",A," 正在连接服务器... ")):y("",!0),o.value?(d(),i("div",{key:2,class:"chat-messages",ref_key:"messagesContainer",ref:k},[(d(!0),i(J,null,P(c.value,(t,r)=>(d(),i("div",{key:r,class:M(["message",t.type])},[n("div",F,_(t.sender)+":",1),n("div",H,_(t.content),1)],2))),128))],512)):y("",!0),o.value?(d(),i("div",Q,[E(n("input",{"onUpdate:modelValue":s[1]||(s[1]=t=>v.value=t),onKeyup:U(W,["enter"]),placeholder:"输入消息...",class:"message-input"},null,544),[[T,v.value]]),n("button",{onClick:W,disabled:!v.value.trim(),class:"send-button"}," 发送 ",8,R),n("button",{onClick:w,class:"disconnect-button"}," 断开连接 ")])):y("",!0)]))}}),Y=V(q,[["__scopeId","data-v-cf86321b"]]);export{Y as default};
